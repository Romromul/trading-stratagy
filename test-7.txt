ðŸ‘‰7th test code! In this code we will make test code 6 more cleaner and modify the code to show us signals on 100 pips changeðŸ‘ˆ



#7th test code trial 1



//@version=5
indicator("Custom MA Crossover Indicator with Time Filter +100 Points", shorttitle="MA+100", overlay=true)

// User-defined input for moving averages
shortMA = input.int(10, "Short MA Period", minval=1)
longMA = input.int(100, "Long MA Period", minval=1)

// User input for time window in UTC
startHour = input.int(9, "Start Hour (UTC)", minval=0, maxval=23)
startMinute = input.int(0, "Start Minute (UTC)", minval=0, maxval=59)
endHour = input.int(15, "End Hour (UTC)", minval=0, maxval=23)
endMinute = input.int(0, "End Minute (UTC)", minval=0, maxval=59)

// Calculating moving averages
shortMAValue = ta.sma(close, shortMA)
longMAValue = ta.sma(close, longMA)

// Plotting the MAs
plot(shortMAValue, title="Short MA", color=color.blue)
plot(longMAValue, title="Long MA", color=color.red)

// Function to check if current time is within user-defined window
isTimeValid() =>
    utcStartTime = timestamp("GMT", year, month, dayofmonth, startHour, startMinute)
    utcEndTime = timestamp("GMT", year, month, dayofmonth, endHour, endMinute)
    time >= utcStartTime and time <= utcEndTime

// Logic for Buy and Sell signals
buySignal = ta.crossover(shortMAValue, longMAValue) and isTimeValid()
sellSignal = ta.crossunder(shortMAValue, longMAValue) and isTimeValid()

var float buyEntryPrice = na
var float sellEntryPrice = na

if (buySignal)
    buyEntryPrice := close
if (sellSignal)
    sellEntryPrice := close

// Reset entry price if opposite signal is triggered
if (buySignal)
    sellEntryPrice := na
if (sellSignal)
    buyEntryPrice := na

// Check for +100 points move
if (not na(buyEntryPrice) and close >= buyEntryPrice + 100)
    label.new(bar_index, low, "+100", color=color.green, style=label.style_label_up, textcolor=color.white, size=size.small, yloc=yloc.belowbar)
    buyEntryPrice := na // Reset to avoid multiple labels for the same entry

if (not na(sellEntryPrice) and close <= sellEntryPrice - 100)
    label.new(bar_index, high, "-100", color=color.red, style=label.style_label_down, textcolor=color.white, size=size.small, yloc=yloc.abovebar)
    sellEntryPrice := na // Reset to avoid multiple labels for the same entry

// Plotting the signals with labels
if (buySignal)
    label.new(bar_index, low, "BUY", color=color.green, style=label.style_label_up, textcolor=color.white, size=size.small, yloc=yloc.belowbar)
if (sellSignal)
    label.new(bar_index, high, "SELL", color=color.red, style=label.style_label_down, textcolor=color.white, size=size.small, yloc=yloc.abovebar)



#7th code Trial #1 has the same result as of #6th code trial code # will be initialized code is bellow




//@version=5
study("Custom MA Crossover Indicator with 100 Point Target", shorttitle="MA")

// User-defined input for moving averages
shortMA = input(10, minval=1, title="Short MA Period")
longMA = input(100, minval=1, title="Long MA Period")

// User input for time window in UTC
startHour = input(9, "Start Hour (UTC)", minval=0, maxval=23)
startMinute = input(0, "Start Minute (UTC)", minval=0, maxval=59)
endHour = input(15, "End Hour (UTC)", minval=0, maxval=23)
endMinute = input(0, "End Minute (UTC)", minval=0, maxval=59)

// Calculating moving averages
shortMAValue = sma(close, shortMA)
longMAValue = sma(close, longMA)

// Plotting the MAs
plot(shortMAValue, title="Short MA", color=color.blue)
plot(longMAValue, title="Long MA", color=color.red)

// Function to check if current time is within user-defined window
isTimeValid() =>
utcTime = timestamp(year, month, dayofmonth, startHour, startMinute)
endTime = timestamp(year, month, dayofmonth, endHour, endMinute)
time >= utcTime and time <= endTime

// Tracking buy and sell signals
var float buyEntryPrice = na
var float sellEntryPrice = na

// Logic for Buy and Sell signals
buySignal = crossover(shortMAValue, longMAValue) and isTimeValid()
sellSignal = crossover(shortMAValue, longMAValue) and isTimeValid()

if(buySignal)
buyEntryPrice != close
else if(sellSignal)
sellEntryPrice != close

// Creating labels for 100-point movement 
if(not na(buyEntryPrice) and close >= buyEntryPrice + 100)
label.new(bar_index, high, text="+100", style=label.style_label_down, color=color.green, textcolor=color.white, yloc=yloc.abovebar)
buyEntryPrice != na // Reset after label is created

if(not na(sellEntryPrice) and close <= sellEntryPrice - 100)
label.new(bar_index, high, text="-100", style=label.style_label_up, color=color.red, textcolor=color.white, yloc=yloc.belowbar)
sellEntryPrice != na // Reset after label is created

// Plotting the signals with white text
plotshape(buySignal, title="Buy Signal", location=location.belowbar, color=color.green, style=shape.labelup, text="BUY", textcolor=color.white)
plotshape(sellSignal, title="Sell Signal", location=location.abovebar, color=color.red, style=shape.labeldown, text="SELL", textcolor=color.white)






ðŸ‘‰But observed the following error :24:45 PM  
Error at 24:1 Mismatched input 'utcTime' expecting 'end of line without line continuation


#7th code Trial #1 fixed code is bellow


ðŸ‘‰//@version=5
indicator("Custom MA Crossover Indicator with 100 Point Target", shorttitle="MA", overlay=true)

// User-defined input for moving averages
shortMA = input.int(10, title="Short MA Period")
longMA = input.int(100, title="Long MA Period")

// User input for time window in UTC
startHour = input.int(9, title="Start Hour (UTC)", minval=0, maxval=23)
startMinute = input.int(0, title="Start Minute (UTC)", minval=0, maxval=59)
endHour = input.int(15, title="End Hour (UTC)", minval=0, maxval=23)
endMinute = input.int(0, title="End Minute (UTC)", minval=0, maxval=59)

// Calculating moving averages using ta namespace
shortMAValue = ta.sma(close, shortMA)
longMAValue = ta.sma(close, longMA)

// Plotting the MAs
plot(shortMAValue, title="Short MA", color=color.blue)
plot(longMAValue, title="Long MA", color=color.red)

// Function to check if current time is within user-defined window
isTimeValid() =>
    utcTime = timestamp("UTC", year, month, dayofmonth, startHour, startMinute)
    endTime = timestamp("UTC", year, month, dayofmonth, endHour, endMinute)
    time >= utcTime and time <= endTime

// Logic for Buy and Sell signals
buySignal = ta.crossover(shortMAValue, longMAValue) and isTimeValid()
sellSignal = ta.crossunder(shortMAValue, longMAValue) and isTimeValid()

var float buyEntryPrice = na
var float sellEntryPrice = na

if (buySignal)
    buyEntryPrice := close
if (sellSignal)
    sellEntryPrice := close

// Creating labels for 100-point movement
if (not na(buyEntryPrice) and close >= buyEntryPrice + 100)
    label.new(bar_index, high, "+100", style=label.style_label_down, color=color.green, textcolor=color.white, yloc=yloc.abovebar)
    buyEntryPrice := na // Reset after label is created

if (not na(sellEntryPrice) and close <= sellEntryPrice - 100)
    label.new(bar_index, low, "-100", style=label.style_label_up, color=color.red, textcolor=color.white, yloc=yloc.belowbar)
    sellEntryPrice := na // Reset after label is created

// Plotting the signals
plotshape(buySignal, title="Buy Signal", location=location.belowbar, color=color.green, style=shape.labelup, text="BUY", textcolor=color.white)
plotshape(sellSignal, title="Sell Signal", location=location.abovebar, color=color.red, style=shape.labeldown, text="SELL", textcolor=color.white)